package me.windy.demo.order.adapter.`in`.http.mapper

import jakarta.inject.Singleton
import me.windy.demo.order.adapter.`in`.http.dto.PlaceOrderRequest
import me.windy.demo.order.adapter.`in`.http.dto.PlaceOrderResponse
import me.windy.demo.order.core.domain.Money
import me.windy.demo.order.core.domain.OrderId
import me.windy.demo.order.core.domain.OrderItem
import me.windy.demo.order.core.port.`in`.PlaceOrderCommand

/**
 * Mapper between HTTP DTOs and Domain objects.
 * Keeps adapters decoupled from domain internals.
 */
@Singleton
class OrderMapper {
    
    /**
     * Maps HTTP request item to domain OrderItem.
     */
    fun toDomain(dto: PlaceOrderRequest.Item): OrderItem {
        return OrderItem.of(
            sku = dto.sku,
            unitPrice = Money.of(dto.unitPrice),
            quantity = dto.quantity
        )
    }
    
    /**
     * Maps HTTP request to PlaceOrderCommand.
     * If requestId is not provided, a new one will be generated by the command.
     */
    fun toCommand(request: PlaceOrderRequest): PlaceOrderCommand {
        val items = request.items.map { toDomain(it) }
        return if (request.requestId != null) {
            PlaceOrderCommand(items, request.requestId)
        } else {
            PlaceOrderCommand(items)
        }
    }
    
    /**
     * Maps OrderId to HTTP response.
     */
    fun toResponse(orderId: OrderId): PlaceOrderResponse {
        return PlaceOrderResponse(orderId = orderId.value)
    }
}

